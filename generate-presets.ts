import { writeFileSync, appendFileSync } from 'fs';
const path = "./src/presets.scss";
writeFileSync(path, "");

const presetPrimaryColors: Record<string, string> = {
  blue: '#1355FF',
  red: '#E50E15',
  green: '#00B966',
  orange: '#FB5D01',
  yellow: '#EDA20D',
  purple: '#9135DC',
  pink: '#DE3692',
  cyan: '#0BBEBE'
};
appendFileSync(path, `// Generated by script. Do NOT modify!
@use "generate" as *;
@use "sass:list";
@use 'sass:map';

$preset-primary-colors: () !default;
$_preset-primary-colors: map.merge((
${
Object.keys(presetPrimaryColors).map(key => {
  return `  ${key}: ${presetPrimaryColors[key]}`;
}).join(",\n")}
), $preset-primary-colors);

`);
Object.keys(presetPrimaryColors).forEach(key => {
  let temp = `$${key}: generate(map.get($_preset-primary-colors, ${key}));\n` +
  `$${key}-primary: list.nth($blue, 6);\n`;
  for (let i = 0; i < 10; i++) {
    temp += `$${key}-${i + 1}: list.nth($${key}, ${i + 1});\n`
  }
  temp += "\n";
  appendFileSync(path, temp);
});

Object.keys(presetPrimaryColors).forEach(key => {
  let temp = `$${key}-dark: generate(map.get($_preset-primary-colors, ${key}), (theme: dark));\n` +
    `$${key}-dark-primary: list.nth($blue-dark, 6);\n`;
  for (let i = 0; i < 10; i++) {
    temp += `$${key}-dark-${i + 1}: list.nth($${key}-dark, ${i + 1});\n`
  }
  temp += "\n";
  appendFileSync(path, temp);
});
