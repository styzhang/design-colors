import { writeFileSync } from 'fs';
import { parseExportScssToJsFile } from "./src/utils";

const path = "./src/presets.scss";
const exportPath = "./src/presets-export.scss";

const presetPrimaryColors: Record<string, string> = {
  blue: '#1355FF',
  red: '#E50E15',
  green: '#00B966',
  orange: '#FB5D01',
  yellow: '#EDA20D',
  purple: '#9135DC',
  pink: '#DE3692',
  cyan: '#0BBEBE'
};

const presetKeys = Object.keys(presetPrimaryColors);

// TODO: add dark neutral colors
const neutralColors = [
  '#FFFFFF',
  '#F3F3F4',
  '#EEEEF0',
  '#E7E8EB',
  '#DCDDE1',
  '#C4C6CD',
  '#A2A6B1',
  '#858A99',
  '#6F7686',
  '#535D6D',
  '#424A57',
  '#323843',
  '#272B34'
];

function genPresetScssFile () {
  let temp = `// Generated by script. Do NOT modify!
@use "generate" as *;
@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

$preset-palettes: ();
$preset-dark-palettes: ();
$preset-primary-colors: () !default;
$_preset-primary-colors: map.merge((
${Object.keys(presetPrimaryColors).reduce((acc, key) => (acc += `  '${key}': ${presetPrimaryColors[key]},\n`), "")}), $preset-primary-colors);

$_preset-keys: map.keys($_preset-primary-colors);
@each $key in $_preset-keys {
  $preset-color: map.get($_preset-primary-colors, $key);
  @if (meta.type-of($preset-color) != 'color') {
    @error string.unquote('The value of #{$key} is not color');
  }
  $preset-palettes: map.set($preset-palettes, $key, generate($preset-color));
  $preset-dark-palettes: map.set($preset-dark-palettes, $key, generate($preset-color, (theme: dark)));
}

`;
  presetKeys.forEach(key => {
    temp += `$${key}: map.get($preset-palettes, '${key}');\n` +
      `$${key}-primary: list.nth($${key}, 6);\n`;
    for (let i = 0; i < 10; i++) {
      temp += `$${key}-${i + 1}: list.nth($${key}, ${i + 1});\n`;
    }
    temp += "\n";
  });
  temp += `$neutral: [${neutralColors.join(", ")}];\n`;
  neutralColors.forEach((v, i) => {
    temp += `$neutral-${i + 1}: list.nth($neutral, ${i + 1});\n`;
  });
  temp += "\n";
  presetKeys.forEach(key => {
    temp += `$${key}-dark: map.get($preset-dark-palettes, '${key}');\n` +
      `$${key}-dark-primary: list.nth($${key}-dark, 6);\n`;
    for (let i = 0; i < 10; i++) {
      temp += `$${key}-dark-${i + 1}: list.nth($${key}-dark, ${i + 1});\n`
    }
    temp += "\n";
  });
  writeFileSync(path, temp);
}

/**
 * string.unquote("${key}") - sass 编译时不让yellow这样的具名颜色值转换为16进制颜色值
 */
function genPresetExportScssFile() {
  let exportTemp = `// Generated by script. Do NOT modify!
@use "./presets" as *;
@use "sass:string";
`;
  exportTemp += `
:export[presetPrimaryColors] {
${presetKeys.reduce((acc, key) => (acc += `  ${key}: $${key}-primary;\n`), "")}}
`;
  exportTemp += `
:export[presetPalettes] {
  neutral: $neutral;
  neutralConst: neutral;
${presetKeys.reduce((acc, key) => (acc += `  ${key}: $${key};\n  ${key}Const: string.unquote("${key}");\n`), "")}}
`
  exportTemp += `
:export[presetDarkPalettes] {
${presetKeys.reduce((acc, key) => (acc += `  ${key}: $${key}-dark;\n  ${key}Const: ${key}Dark;\n`), "")}}
`
  writeFileSync(exportPath, exportTemp);
}

genPresetScssFile();
genPresetExportScssFile();
parseExportScssToJsFile(
  exportPath,
  "./src/presets.ts"
);
